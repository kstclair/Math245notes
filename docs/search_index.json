[
["index.html", "Math 245 Notes Getting Started Getting help", " Math 245 Notes Katie St. Clair, Carleton College 2019-08-02 Getting Started This manual is designed to provide students in Math 245 (Applied Regression Analysis) with supplemental notes and examples. Getting help Try to start your homework or projects early enough to seek help from me! You can do this in a variety of ways: Office visit: Stop by office hours or drop by anytime my door is open. This is the easiest way for me to answer any class questions that you have or help you debug troublesome R code. Email: I can usually clarify any homework questions over email. If you are running in an R problem, you should snapshot your R code and error and send it to me via email. I can often figure out your code issue this way! Stats Lab: Visit the stats lab assistants in CMC 201 for help using R. "],
["review.html", "Chapter 1 Review", " Chapter 1 Review You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 1.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 1.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 1.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 1.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2019) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["slr.html", "Chapter 2 Simple Linear Regression", " Chapter 2 Simple Linear Regression "],
["mlr.html", "Chapter 3 Multiple Regression", " Chapter 3 Multiple Regression "],
["logistic.html", "Chapter 4 Logistic Regression", " Chapter 4 Logistic Regression "],
["poisson.html", "Chapter 5 Poisson Regression", " Chapter 5 Poisson Regression "],
["rrstudio.html", "A R and Rstudio A.1 Running Rstudio A.2 Installing R A.3 Installing Rstudio A.4 Installing R packages", " A R and Rstudio R is a free professional statistical software that is available for use on windows, mac and linux computers. R is a popular tool for researchers from many fields so acquiring basic R skills from our stats classes will be beneficial for this course and career plans! RStudio is a free software that provides a user-friendly interface with R. We will be running R through RStudio in our stats classes. R can be more challenging for a brand new user than other software (like Excel, SPSS, etc) because analyzes are done using written commands rather than using a drop down (point-and-click) menu. But R is very powerful because of the huge variety of statistical methods that it supports (due to the addition of free user contributed packages) and the user’s ability to customize their experience (graphics, new functions, data manipulation, etc). Because R is based on written commands that can be recorded in a variety of ways, it is easy for a user to reproduce, re-do or continue analyzes that were started at a different point in time. This is much harder to do when you are using a bunch of drop-down menu commands to run your analysis! We will emphasize reproducibility in this course by using R Markdown scripts (Section C) to complete our analyzes. A.1 Running Rstudio Browser: You can access an online version of Rstudio from mirage.mathcs.carleton.edu. If you are new to using Rstudio, I encourage you to use mirage rather than installing R/Rstudio on your computer. You can access mirage from anywhere on campus using Eduroam wireless if on a laptop, but from off campus you will first need to turn on Carleton’s VPN prior to logging in. Please install this software! Why use mirage? Any work you create (R scripts, Markdown, pdf, or word docs) are saved on your account located on this server (file path /Accounts/username). If you want to download files from this account, use the “More &gt; Export” drop down menu from the “Files” pane (lower right panel). Mirage also has most R packages that we use in our classes preinstalled so you don’t need to install them before using them. Personal computer: You can download R (Section A.2) and Rstudio (Section A.3) software onto your personal computer. You then open Rstudio to start an R session. You will need install certain R packages that we used in our class that aren’t part of the default package installation. See Section~@ref{packages}. A.2 Installing R Follow the appropriate link below and complete the default installation. Windows: http://cran.r-project.org/bin/windows/base/ Mac: http://cran.r-project.org/bin/macosx/ A.3 Installing Rstudio Follow the link below and download the free RStudio Desktop Open Source Edition. Windows or Mac: http://www.rstudio.com/ide/download/ A.4 Installing R packages R packages provided added analysis tools that R users contribute to the R community. The default R installation only provides us with a fraction of the available packages. The most straightforward way to install a needed package in Rstudio is to click the Packages tab in the lower right pane. Click the Install button and start typing the package name into Packages field, then click Install to add the package to your available package library. You should only need to install a package once. Alternatively, you can install a package by typing an install.packages command into the Console window. For example, the following command installs the R data package Sleuth3 for The Statistical Sleuth textbook: install.packages(&quot;Sleuth3&quot;) "],
["renviron.html", "B The R enviroment B.1 Workspace B.2 Working directory B.3 Rstudio projects", " B The R enviroment B.1 Workspace Anything that you load or create in Rstudio (data, vectors, models) are called objects. You can see your current objects in your RStudio Environment pane (upper right). These objects, along with your command history, are contained in what R calls your “Workspace”. When you exit Rstudio, you may be asked if you want to save your workspace as a .RData file before exiting. I strongly encourage you not to do this since it can make it very hard to reproduce your workflow (and it can slow down Rstudio start up). Instead, use R markdown (Section C) to document your workflow so you can redo any analysis that you’ve previously done. To change Rstudio’s default startup and exit workspace behavior: From the Tools drop down menu (at the top), select Global Options… Under the General tab, uncheck the “Restore .RData into workspace at startup” In the “Save workspace to .RData on exit:” dropdown, select Never B.2 Working directory The default location that R looks for “stuff” or saves “stuff” is called your Working Directory. For example, the default location of this folder is typically your Documents folder for a Windows machine. You can run the getwd() command to see where your current working directory is located. For my desktop Windows computer, the default working directory location is &gt; getwd() [1] &quot;C:/Users/kstclair/Documents&quot; Or from the mirage server, &gt; getwd() [1] &quot;/Accounts/kstclair&quot; B.3 Rstudio projects RStudio (not standalone R) has a feature called Projects that make it easy to start RStudio in a particular working directory. You can create different Projects for different classes (or research projects). Your first task in Rstudio for Math 245 will be to create a Math 245 project: Find the Project button in the upper right-hand corner of Rstudio. Select New Project. Click New Directory from the New Project dialog box. Click on New project (again), then enter Math245 as your Directory name (no spaces). Use the Browse button to put this project in a good spot on your computer or accept the default location on mirage. Click on Create Project. Your Rstudio session should not change in looks all that much but check your computer should now contain a Math245 folder in the location you chose. This folder will contain a Math245.Rproj icon. Your working directory is now set to this Math245 folder. Check this with the getwd() command. Starting your Math245 project: Rstudio default settings are to start up your last project when you reopen Rstudio. So just opening Rstudio (or loggin onto mirage) usually opens your Math245 project. You will see your project name in the upper right-hand project button location. Alternatively, start your R project by double clicking on the project icon in your Math245 folder. You will know you are in You can also open or change projects with the drop-down project menu. "],
["markdown.html", "C R Markdown C.1 How to write an R Markdown document C.2 Hints C.3 Changing R Markdown chunk evaluation behavior C.4 Creating a new R Markdown document C.5 Extra: Graph formatting C.6 Extra: Table formatting", " C R Markdown An R Markdown (.Rmd) file will allow you to integrate your R commands, output and written work in one document. You write your R code and explanations in the .Rmd file, the knit the document to a Word, HTML, or pdf file. A basic R Markdown file has the following elements: Header: this is the stuff in between the three dashes --- located at the top of your .Rmd file. A basic header should specify your document title, author and output type (e.g. word_document). Written work: Write up your work like you would in any word/google doc. Formatting is done with special symbols. E.g. to bold a word or phrase, place two asterisks ** at the start and end of the word or phrase (with no spaces). To get section headers use one or more hash tags # prior to the section name. R code: Your R commands are contained in one or more chunks that contains one or more R commands. A chunk starts with three backticks (to the left of your 1 key) combined with {r} and a chunk ends with three more backticks. See the image below for an example of a chunk that reads in the data files HollywoodMovies2011.csv. A R chunk that reads in a data file Important!! A common error that students run into when first using R Markdown is forgetting to put the read.csv command in their document. An R Markdown document must contain all commands needed to complete an analysis. This includes reading in the data! Basically, what happens during the knitting process is that a fresh version of an Rstudio environment is created that is completely separate from the Rstudio you see running in front of you. The R chunks are run in this new environment, and if you will encounter a Markdown error if you, say, try to use the movies data frame without first including the read.csv chunk shown in Figure 1. C.1 How to write an R Markdown document Write your commands in R chunks, not in the console. Run chunk commands using the suggestions in the Hints section below. Knit your document often. This allows you to catch errors/typos as you make them. C.2 Hints You can knit a .Rmd by pressing the Knit button at the top of the doc. You can change output types (e.g. switch from HTML to Word) by typing in the preferred doc type in the header, or by using the drop down menu option found by clicking the down triangle to the right of the Knit button. You can run a line of code in the R console by putting your cursor in the line and selecting Run &gt; Run Selected Line(s). You can run all commands in a chunk by clicking the green triangle on the right side of the chunk. URLs can be embeded between &lt; and &gt; symbols. The image below shows a quick scrolling menu that is available by clicking the double triangle button at the bottom of the .Rmd. This menu shows section headers and available chunks. It is useful for navagating a long .Rmd file. Quick scroll through Markdown document C.3 Changing R Markdown chunk evaluation behavior The default setting in Rstudio when you are running chunks is that the “output” (numbers, graphs) are shown “inline” within the Markdown Rmd. For a variety of reasons, my preference is to have commands run in the console. To see the difference between these two types of chunk evaluation option, you can change this setting as follows: Select Tools &gt; Global Options. Click the R Markdown section and uncheck (if needed) the option Show output inline for all R Markdown documents. Click OK. Now try running R chunks in the .Rmd file to see the difference. You can recheck this box if you prefer the default setting. C.4 Creating a new R Markdown document I suggest using old .Rmd HW file as a template for a new HW assignment. But if you want to create a completely new docment: Click File &gt; New File &gt; R Markdown…. A window like the one shown below should appear. The default settings will give you a basic Markdown (.Rmd) file that will generate an HTML document. Click OK on this window. Opening a Markdown document You should now have an “Untitled1” Markdown file opened in your document pane of Rstudio. Save this file, renamed as “FirstMarkdown.Rmd”, somewhere on your computer. (Ideally in a Math215 folder!) On Mirage, save the file in the default location (which is your account folder on the mirage server). Now click the Knit HTML button on the tool bar at the top of your Markdown document. This will generate a “knitted” (compiled) version of this document. Check that there is now an HTML file named “FirstMarkdown.html” in the same location as your “FirstMarkdown.Rmd” file. C.5 Extra: Graph formatting The data set Cereals contains information on cereals sold at a local grocery store. # load the data set Cereals &lt;- read.csv(&quot;http://math.carleton.edu/Stats215/RLabManual/Cereals.csv&quot;) C.5.1 Adding figure numbers and captions To add captions to the figures you make you need to add the argument fig.cap=\"my caption\" to your R chunk that creates the figure. If you have two or more figures created in the R chunk then give the fig.cap argument a vector of captions. If you are knitting to a pdf, you don’t need to add “Figure 1”, etc. numbering to the figure captions (they will be numbered automatically). For HTML and Word output types, you need to manually number figures. C.5.2 Resizing graphs in Markdown Suppose we want to create a boxplot of calories per gram grouped by cereal type and a scatterplot of calories vs. carbs per gram. Here are the basic commands without any extra formatting that create Figures 1 and 2: ```{r, fig.cap=\"Figure 1: Distributions of calories per gram by cereal type\"} boxplot(calgram ~ type, data=Cereals, main=\"Calories by type\", ylab=\"Calories per gram\") ``` Figure C.1: Distributions of calories per gram by cereal type ```{r, fig.cap=\"Figure 2: Calories vs. Carbs per gram\"} plot(carbsgram ~ calgram, data=Cereals, main=\"Carbs vs Calories\") ``` Figure C.2: Calories vs. Carbs per gram We can add fig.height and fig.width parameters to the Markdown R chunk to resize the output size of the graph. The size inputs used here are a height of 3.5 inches and a width of 6 inches. The command below creates Figures 3 and 4. ```{r, fig.height=3.5, fig.width=5, fig.cap=c(\"Figure 3: Distributions of calories per gram by cereal type\",\"Figure 4: Calories vs. Carbs per gram\")} boxplot(calgram ~ type, data=Cereals, main=\"Calories by type\", ylab=\"Calories per gram\") plot(carbsgram ~ calgram, data=Cereals, main=\"Carbs vs Calories\") ``` boxplot(calgram ~ type, data=Cereals, main=&quot;Calories by type&quot;, ylab=&quot;Calories per gram&quot;) Figure C.3: Distributions of calories per gram by cereal type plot(carbsgram ~ calgram, data=Cereals, main=&quot;Carbs vs Calories&quot;) Figure C.4: Calories vs. Carbs per gram C.5.3 Changing graph formatting in R You can use the par command to change R’s graphical parameter settings for plots that are not made from ggplot2. There are many options that can be changed, but one of the most useful is to change the layout of the graphical output display. The argument mfrow (multi-frame row) is given a vector c(nr, nc) that draws figures in an nr (number of rows) by nc (number of columns) array. We can arrange our two graphs in a 1 by 2 display (1 row, 2 columns) with the command: par(mfrow=c(1,2)) boxplot(calgram ~ type, data=Cereals, main=&quot;Calories by type&quot;, ylab=&quot;Calories per gram&quot;) plot(carbsgram ~ calgram, data=Cereals, main=&quot;Carbs vs Calories&quot;) Figure C.5: Distribution of calories per gram by cereal type and calories vs. carbs per gram. C.5.4 Hiding R commands You can omit R commands from your final document by adding echo=FALSE to your R chunk argument. Any output produced by your command (graphical or numerical) will still be displayed. For example, the following command creates Figure 6, a boxplot of carbs per gram by cereal type. ```{r, echo=FALSE, fig.cap=\"Figure 6: Distributions of calories per gram and shelf placement by cereal type\", fig.height=3, fig.width=4} boxplot(carbsgram ~ type, data=Cereals, main=\"Carbs by type\", ylab=\"Carbs per gram\") ``` Figure C.6: Distributions of calories per gram and shelf placement by cereal type C.5.5 Global changes in graph format The R chunk options that control graph sizes and output features (like echo) can be set globally for all R chunks either in the header (like with fig.caption) or in an opts_chunk$set() command at the start of the .Rmd file. I usually opt for setting global features with the opts_chunk command which you often see at the start of my .Rmd files. Any global settings, like echo or fig.height, can be overridden locally by changing them in individual chunks. C.5.6 Comments: Markdown is very sensitive to spaces, or lack-there-of. If you get odd formatting issues, try adding a spaces between R chunks, paragrahs, lists, section headers, etc. For example, you always need a space between an R chunk or text and a section header. C.6 Extra: Table formatting This handout gives some basic ways to format numerical output produced in your R chunks. Some of the methods mentioned below might only work when knitting to a PDF. Additional info about formatting text in R Markdown can be found online: http://rmarkdown.rstudio.com/authoring_basics.html http://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf http://rmarkdown.rstudio.com/pdf_document_format.html In homework or R appendices, I expect to see both the commands and output produced by those commands as your “work” for a problem. But in reports, as in any formal research paper, you should not include R commands or output (except for graphs). This handout is designed, primarily, to help you format numerical results to present into your written reports. The data set Cereals contains information on cereals sold at a local grocery store. # load the data set Cereals &lt;- read.csv(&quot;http://math.carleton.edu/Stats215/RLabManual/Cereals.csv&quot;) C.6.1 Hiding R commands and R output As mentioned in the graph formatting handout, adding the chunk option echo=FALSE will display output (like graphs) produced by a chunk but not show the commands used in the chunk. You can stop both R commands and output from being displayed in a document by adding the chunk option include=FALSE. As you work through a report analysis, you may initially want to see all of your R results as you are writing your report. But after you’ve summarized results in paragraphs or in tables, you can then use the include=FALSE argument to hid your R commands and output in your final document. If you ever need to rerun or reevaluate your R work for a report, you can easily recreate and edit your analysis since the R chunks used in your original report are still in your R Markdown .Rmd file. C.6.2 Markdown tables The Markdown language allows you to construct simple tables using vertical lines | to separate columns and horizontal lines - to create a header. Make sure to include at least one space before and after your Markdown table or it will not format correctly. I can’t find an easy way to attached an automatic table number and caption to this type of table, so I’ve simply written (and centered) the table number and caption by hand for the table below. Suppose we want to present the 5-number summary of calories per gram by cereal type. The tapply command can be used to obtain these numbers. tapply(Cereals$calgram, Cereals$type, summary) ## $adult ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 2.000 3.208 3.519 3.399 3.667 4.600 ## ## $children ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 3.636 3.931 4.000 4.028 4.074 4.483 We can construct a table of stats by type “by hand” using simple markdown table syntax in our .Rmd file that is shown below: Type | Min | Q1 | Median | Q3 | Max ---- | --- | --- | --- | --- | --- Adult | 2.0 | 3.2 | 3.5 | 3.7 | 4.6 Children | 3.6 | 3.9 | 4.0 | 4.1 | 4.5 The knitted table produced is shown below: Type Min Q1 Median Q3 Max Adult 2.0 3.2 3.5 3.7 4.6 Children 3.6 3.9 4.0 4.1 4.5 C.6.3 Markdown tables via kable The R package knitr contains a simple table making function called kable. You can use this function to, say, show the first few rows of a data frame: library(knitr) kable(head(Cereals), digits=3, caption=&quot;Table 1: Cereals data (first 6 cases)&quot;) library(knitr) kable(head(Cereals), digits=3, caption=&quot;Cereals data (first 6 cases)&quot;) Table C.1: Cereals data (first 6 cases) brand type shelf cereal serving calgram calfatgram totalfatgram sodiumgram carbsgram proteingram GM children bottom Lucky Charms 30 4.000 0.333 0.033 0.007 0.833 0.067 GM adult bottom Cheerios 30 3.667 0.500 0.067 0.007 0.733 0.100 Kellogs children bottom Smorz 30 4.000 0.667 0.067 0.005 0.833 0.033 Kellogs children bottom Scooby Doo Berry Bones 33 3.939 0.303 0.030 0.007 0.848 0.030 GM adult bottom Wheaties 30 3.667 0.333 0.033 0.007 0.800 0.100 GM children bottom Trix 30 4.000 0.500 0.050 0.006 0.867 0.033 Or you can use kable on a two-way table of counts or proportions: kable(table(Cereals$brand, Cereals$type), caption=&quot;Table 2: Cereal brand and type&quot;) Table C.2: Cereal brand and type adult children GM 4 11 Kashi 6 0 Kellogs 4 13 Quaker 1 2 WW 2 0 C.6.4 The pander package The R package pander creates simple tables in R that do not need any additional formatting in Markdown. The pander() function takes in an R object, like a summary table or t-test output, and outputs a Markdown table. You can add a caption argument to include a table number and title. Here is a table for the summary of calories per gram: library(pander) pander(summary(Cereals$calgram), caption=&quot;Table 3: Summary statistics for calories per gram.&quot;) Table 3: Summary statistics for calories per gram. Min. 1st Qu. Median Mean 3rd Qu. Max. 2 3.636 3.929 3.779 4.031 4.6 Pander can format tables and proportion tables. Here is the table for cereal type and shelf placement (Table 4), along with the distribution of shelf placement by cereal type (Table 5). my.table &lt;- table(Cereals$type,Cereals$shelf) pander(my.table,round=3, caption=&quot;Table 4: Cereal type and shelf placement&quot;) Table 4: Cereal type and shelf placement bottom middle top adult 2 1 14 children 7 18 1 pander(prop.table(my.table,1),round=3, caption=&quot;Table 5: Distribution of shelf placement by cereal type&quot;) Table 5: Distribution of shelf placement by cereal type bottom middle top adult 0.118 0.059 0.824 children 0.269 0.692 0.038 Here are t-test results for comparing mean calories for adult and children cereals (Table 6): pander(t.test(calgram ~ type, data=Cereals), caption=&quot;Table 6: Comparing calories for adult and children cereals&quot;) Table 6: Comparing calories for adult and children cereals (continued below) Test statistic df P value Alternative hypothesis -4.066 18.45 0.0006942 * * * two.sided mean in group adult mean in group children 3.399 4.028 Here are chi-square test results for testing for an association between shelf placement and cereal type (Table 7). Note that the simulate.p.value option was used to give a randomization p-value since the sample size criteria for the chi-square approximation was not met. pander(chisq.test(my.table, simulate.p.value = TRUE),caption=&quot;Table 7: Chi-square test for placement and type&quot;) Table 7: Chi-square test for placement and type Test statistic df P value 28.63 NA 0.0004998 * * * Here are the basic results for the regression of carbs on calories (Table 8). pander(lm(carbsgram ~ calgram, data=Cereals), caption=&quot;Table 8: Regression of carbs on calories&quot;) Table 8: Regression of carbs on calories Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 0.1021 0.0804 1.27 0.2111 calgram 0.1798 0.02108 8.528 1.264e-10 C.6.5 The stargazer package The stargazer package, like pander, automatically generates Markdown tables from R objects. The stargazer function has more formatting options than pander and can generate summary stats from a data frame table. It can also provide nicely formatted comparisons between 2 or more regression models. See the help file ?stargazer for more options. You will need to add the R chunk option results='asis' to get the table formatted correctly. I also include the message=FALSE option in the chunk below that runs the library command to suppress the automatic message created when running the library command with stargazer. When you give stargazer a data frame, it gives you summary stats for all numeric variables in the data frame (Table 10): ```{r, results='asis', message=FALSE} library(stargazer) stargazer(Cereals, type=\"html\", title=\"Table 9: Default summary stats using stargazer\") ``` Table 9: Default summary stats using stargazer Statistic N Mean St. Dev. Min Pctl(25) Pctl(75) Max serving 43 36.953 10.542 27 30 50 60 calgram 43 3.779 0.517 2 3.6 4.0 5 calfatgram 43 0.490 0.261 0.000 0.328 0.600 1.034 totalfatgram 43 0.053 0.031 0.000 0.033 0.063 0.121 sodiumgram 43 0.005 0.002 0.000 0.003 0.006 0.007 carbsgram 43 0.782 0.116 0.280 0.767 0.850 0.920 proteingram 43 0.082 0.057 0.030 0.034 0.097 0.267 The default table type is \"latex\" which is the format you want when knitting to a pdf document. When knitting to an html document we need to change type to \"html\". Unfortunately, there is no type that works nicely with Word documents so you would be better off using pander if you want a Word document. Note: When using the latex type and knitting to a pdf, you will get an annoying stargazer message about the creation of your latex table. Include the argument header=FALSE in the stargazer command to suppress this message when knitting to a pdf. You can subset the Cereals data frame to only include the variables (columns) that you want displayed. In Table 11 we only see calories and carbs. You can also edit the summary stats displayed by specifying them in the summary.stat argument. See the stargazer help file for more stat options. stargazer(Cereals[,c(&quot;calgram&quot;,&quot;carbsgram&quot;)], type=&quot;html&quot;, title=&quot;Table 10: Five number summary stats&quot;, summary.stat=c(&quot;max&quot;,&quot;p25&quot;,&quot;median&quot;,&quot;p75&quot;,&quot;max&quot;)) Table 10: Five number summary stats Statistic Max Pctl(25) Median Pctl(75) Max calgram 5 3.6 3.9 4.0 5 carbsgram 0.920 0.767 0.800 0.850 0.920 The stargazer package was created to display results of statistical models. Here is the basic display for the regression of carbs on calories (Table 12). The argument single.row puts estimates and standard errors (in parentheses) in one row. There are many options that can be tweaked, like including p-values or confidence intervals. my.lm &lt;- lm(carbsgram ~ calgram, data=Cereals) stargazer(my.lm, type=&quot;html&quot;, title=&quot;Table 11: Regression of carbs on calories&quot;, single.row=TRUE) Table 11: Regression of carbs on calories Dependent variable: carbsgram calgram 0.180*** (0.021) Constant 0.102 (0.080) Observations 43 R2 0.639 Adjusted R2 0.631 Residual Std. Error 0.071 (df = 41) F Statistic 72.721*** (df = 1; 41) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 Table 13 adds the argument keep.stat to specify that only sample size and \\(R^2\\) should be included in the table. See the help file for more options to this argument. stargazer(my.lm, type=&quot;html&quot;, title=&quot;Table 12: Regression of carbs on calories&quot;, single.row=TRUE, keep.stat=c(&quot;n&quot;,&quot;rsq&quot;)) Table 12: Regression of carbs on calories Dependent variable: carbsgram calgram 0.180*** (0.021) Constant 0.102 (0.080) Observations 43 R2 0.639 Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 "],
["rreview.html", "D R review for data analysis", " D R review for data analysis "],
["mathreview.html", "E Math review", " E Math review "],
["references.html", "References", " References "]
]
